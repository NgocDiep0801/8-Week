Each customerâ€™s onboarding journey.
SELECT s.customer_id,
       p.plan_id,
       p.plan_name,
       s.start_date
FROM foodie_fi.plans p
JOIN foodie_fi.subscriptions s ON p.plan_id = s.plan_id
WHERE s.customer_id IN (1, 2, 11, 13, 15, 16, 18, 19)
ORDER BY s.customer_id;

1. --How many customers has Foodie-Fi ever had?
SELECT COUNT (DISTINCT customer_id) AS Total_Customers
FROM foodie_fi.subscriptions;

2. --What is the monthly distribution of trial plan start_date values for our dataset - use the start of the month as the group by value
SELECT Date_part('month', start_date) AS MONTH,
       COUNT (s.plan_id) AS Total
FROM foodie_fi.subscriptions s
WHERE s.plan_id = 0
GROUP BY Date_part('month', start_date);

3. --What plan start_date values occur after the year 2020 for our dataset? Show the breakdown by count of events for each plan_name.
SELECT p.plan_id,
       p.plan_name,
       COUNT(s.plan_id) AS Total_Event
FROM foodie_fi.subscriptions s
JOIN foodie_fi.plans p ON s.plan_id = p.plan_id
WHERE s.start_date >= '2021-01-01'
GROUP BY p.plan_id,
         p.plan_name
ORDER BY p.plan_id,
         p.plan_name;

4. --What is the customer count and percentage of customers who have churned rounded to 1 decimal place?
SELECT COUNT(s.customer_id) AS churn_mem,
       ROUND(100.0 * COUNT(s.customer_id)/
               (SELECT COUNT (DISTINCT customer_id)
                FROM foodie_fi.subscriptions), 1) AS Churned_rounded
FROM foodie_fi.subscriptions s
JOIN foodie_fi.plans p ON s.plan_id = p.plan_id
WHERE p.plan_id = 4;

5. --How many customers have churned straight after their initial free trial - what percentage is this rounded to the nearest whole number?
WITH rank AS
  (SELECT s.customer_id,
          p.plan_id,
          ROW_NUMBER() OVER (PARTITION BY s.customer_id
                             ORDER BY s.start_date) AS row_num
   FROM foodie_fi.subscriptions AS s
   JOIN foodie_fi.plans p ON s.plan_id = p.plan_id)
SELECT COUNT(CASE
                 WHEN row_num = 2
                      AND p.plan_name = 'churn' THEN 1
                 ELSE 0
             END) AS churned_customers,
       ROUND(100.0 * COUNT(CASE
                               WHEN row_num = 2
                                    AND p.plan_name = 'churn' THEN 1
                               ELSE 0
                           END) /
               (SELECT COUNT(DISTINCT customer_id)
                FROM foodie_fi.subscriptions) , 1) AS churn_percent
FROM rank
WHERE plan_id = 4
  AND row_num = 2;

6. What is the number and percentage of customer plans after their initial free trial?
WITH next_plan AS
  (SELECT customer_id,
          plan_id,
          LEAD(plan_id) OVER (PARTITION BY customer_id
                              ORDER BY plan_id)AS next_plan_id
   FROM foodie_fi.subscriptions)
SELECT next_plan_id AS plan_id,
       COUNT(customer_id) AS converted_customers,
       ROUND(100.0 * COUNT(customer_id):: NUMERIC /
               (SELECT COUNT(DISTINCT customer_id)
                FROM foodie_fi.subscriptions), 1) AS conversion_percentage
FROM next_plan
WHERE next_plan IS NOT NULL
  AND plan_id = 0
  AND next_plan_id != 4
GROUP BY next_plan_id;

7. What is the customer count and percentage breakdown of all 5 plan_name values at 2020-12-31?
WITH next_days AS
  (SELECT customer_id,
          plan_id,
          lead(start_date) OVER (PARTITION BY customer_id
                                 ORDER BY start_date) AS next_days
   FROM foodie_fi.subscriptions
   WHERE start_date <= '2020-12-31')
SELECT plan_id,
       count(DISTINCT customer_id) AS customer,
       round (100.0 *count(DISTINCT customer_id) /
                (SELECT count(DISTINCT customer_id)
                 FROM foodie_fi.subscriptions), 1) AS percentage
FROM next_days
WHERE next_days IS NOT NULL
GROUP BY plan_id;

8. How many customers have upgraded to an annual plan in 2020?
SELECT COUNT (DISTINCT customer_id) AS Total_customer
FROM foodie_fi.subscriptions
WHERE plan_id = 3
  AND start_date >= '2020-01-01'
  AND start_date <= '2020-12-31';
 
9. How many days on average does it take for a customer to upgrade to an annual plan from the day they join Foodie-Fi?
WITH trial AS
  (SELECT customer_id,
          start_date AS trial_date
   FROM foodie_fi.subscriptions
   WHERE plan_id = 0),
     annual AS
  (SELECT customer_id,
          start_date AS annual_date
   FROM foodie_fi.subscriptions
   WHERE plan_id = 3)
SELECT round(avg(annual_date - trial_date), 0) AS AVG_Update
FROM trial t
JOIN annual a ON t.customer_id = a.customer_id;

10. Can you further breakdown this average value into 30 day periods (i.e. 0-30 days, 31-60 days etc)
WITH trial AS
  (SELECT customer_id,
          start_date AS trial_date
   FROM foodie_fi.subscriptions
   WHERE plan_id = 0),
     annual AS
  (SELECT customer_id,
          start_date AS annual_date
   FROM foodie_fi.subscriptions
   WHERE plan_id = 3),
     Cus AS
  (SELECT width_bucket(a.annual_date - t.trial_date, 0, 365, 12) AS avg_update
   FROM trial t
   JOIN annual a ON t.customer_id = a.customer_id)
SELECT ((avg_update - 1) * 30 || ' - ' || avg_update * 30 || ' days') AS bucket,
       COUNT (*) AS total_customer
FROM cus
GROUP BY avg_update;

11. How many customers downgraded from a pro monthly to a basic monthly plan in 2020?

1/WITH ranks AS
  (SELECT s.plan_id,
          p.plan_name customer_id,
          lead(s.plan_id) over(PARTITION BY customer_id
                               ORDER BY start_date) AS next_plan
   FROM foodie_fi.subscriptions s
   JOIN foodie_fi.plans p ON s.plan_id = p.plan_id
   WHERE date_part ('year', start_date) = 2020 )
SELECT count(DISTINCT customer_id) AS Total
FROM ranks
WHERE plan_id = 2
  AND next_plan = 1;

2/ WITH pro_mo AS
  (SELECT customer_id,
          start_date AS proday
   FROM foodie_fi.subscriptions
   WHERE plan_id = 2 ),
     ba_mo AS
  (SELECT customer_id,
          start_date AS baday
   FROM foodie_fi.subscriptions
   WHERE plan_id = 1 )
SELECT COUNT(DISTINCT p.customer_id) AS total_downgrades
FROM pro_mo p
JOIN ba_mo b ON p.customer_id = b.customer_id
WHERE p.proday < b.baday
  AND b.baday BETWEEN '2020-01-01' AND '2020-12-31';



