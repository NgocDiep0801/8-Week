-- 1. What is the total amount each customer spent at the restaurant?
SELECT s.customer_id,
       SUM(m.price) AS Total_Amount
FROM sales s
JOIN menu m ON s.product_id = m.product_id
GROUP BY s.customer_id
ORDER BY s.customer_id;

-- 2. How many days has each customer visited the restaurant?
SELECT s.customer_id,
       COUNT(DISTINCT s.order_date) AS 'Days'
FROM sales s
GROUP BY s.customer_id;

-- 3. What was the first item from the menu purchased by each customer?
WITH ordered_sales AS
  (SELECT s.customer_id,
          s.order_date,
          m.product_name,
          DENSE_RANK () OVER (PARTITION BY s.customer_id
                              ORDER BY s.order_date) AS Rankk
   FROM Sales s
   JOIN menu m ON s.product_id = m.product_id)
SELECT customer_id,
       product_name
FROM ordered_sales
WHERE Rankk = 1
GROUP BY customer_id,
         product_name

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT TOP (1) m.product_name,
       COUNT(s.product_id) AS Most_purchased
FROM sales s
JOIN menu m ON s.product_id = m.product_id
GROUP BY product_name
ORDER BY Most_purchased DESC

-- 5. Which item was the most popular for each customer?
WITH most_popular AS
  (SELECT s.customer_id,
          m.product_name,
          count(s.product_id) AS order_count,
          dense_rank () OVER (PARTITION BY s.customer_id
                              ORDER BY count(s.customer_id) DESC) AS rank
   FROM sales s
   JOIN menu m ON s.product_id = m.product_id
   GROUP BY s.customer_id,
            m.product_name)
SELECT customer_id,
       product_name,
       order_count
FROM most_popular
WHERE rank = 1;
-- 6. Which item was purchased first by the customer after they became a member?
WITH join_member AS
  (SELECT s.customer_id,
          s.product_id,
          row_number() over(PARTITION BY s.customer_id
                            ORDER BY s.order_date) AS row_num
   FROM Sales s
   JOIN members m ON s.customer_id = m.customer_id
   AND s.order_date > m.join_date)
SELECT customer_id,
       product_name
FROM join_member
JOIN menu mn ON join_member.product_id = mn.product_id
WHERE row_num = 1
ORDER BY customer_id ASC;

-- 7. Which item was purchased just before the customer became a member?
WITH join_member AS
  (SELECT s.customer_id,
          s.product_id,
          row_number() over(PARTITION BY s.customer_id
                            ORDER BY s.order_date) AS row_num
   FROM Sales s
   JOIN members m ON s.customer_id = m.customer_id
   AND s.order_date < m.join_date)
SELECT customer_id,
       product_name
FROM join_member
JOIN menu mn ON join_member.product_id = mn.product_id
WHERE row_num = 1
ORDER BY customer_id ASC;


-- 8. What is the total items and amount spent for each member before they became a member?

SELECT s.customer_id,
       COUNT (s.product_id) AS total_items,
             SUM (mn.price) AS total_amount
FROM Sales s
JOIN members m ON s.customer_id = m.customer_id
JOIN menu mn ON s.product_id = mn.product_id
AND s.order_date < m.join_date
GROUP BY s.customer_id
ORDER BY customer_id ASC;

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
WITH points AS
  (SELECT product_id,
          CASE
              WHEN product_id = 1 THEN price * 20
              ELSE price * 10
          END AS POINT
   FROM Menu)
SELECT sales.customer_id,
       sum(POINT) AS Total_points
FROM points
JOIN sales ON points.product_id = sales.product_id
GROUP BY customer_id
ORDER BY customer_id;

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
WITH dates_cte AS (
  SELECT 
    customer_id, 
      join_date, 
      join_date + 6 AS valid_date, 
      DATE_TRUNC(
        'month', '2021-01-31'::DATE)
        + interval '1 month' 
        - interval '1 day' AS last_date
  FROM dannys_diner.members
)

SELECT 
  sales.customer_id, 
  SUM(CASE
    WHEN menu.product_name = 'sushi' THEN 2 * 10 * menu.price
    WHEN sales.order_date BETWEEN dates.join_date AND dates.valid_date THEN 2 * 10 * menu.price
    ELSE 10 * menu.price END) AS points
FROM dannys_diner.sales
INNER JOIN dates_cte AS dates
  ON sales.customer_id = dates.customer_id
  AND dates.join_date <= sales.order_date
  AND sales.order_date <= dates.last_date
INNER JOIN dannys_diner.menu
  ON sales.product_id = menu.product_id
GROUP BY sales.customer_id;
